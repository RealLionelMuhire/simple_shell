#include "shell.h"

/**
 * *_strchr - search c in string s
 * @s: string contains c
 * @c: charcter to search
 * Return: Pointer storing c
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		s++;
	}

	if (c == '\0')
	{
		return (s);
	}
	return (NULL);
}

/**
 * _strlen - returns the lenghth of o string
 * @s: string to return
 * Return: i at the end
 */

int _strlen(char *s)
{
	int i = 0;

	while (*s != '\0')
	{
		i++;
		s++;

	}
	return (i);

}


/**
 * _strcmp - compares 2 strings
 * @s1: string 1
 * @s2: string 2
 * Return: k always at success
 */

int _strcmp(char *s1, char *s2)
{
	int j, k;

	for (j = 0; s1[j] != '\0'; j++)
	{
		if (s1[j] == s2[j])
		{
			;
		}
		else
		{
			break;
		}
	}
	k = s1[j] - s2[j];

	return (k);
}

/**
 * *_strdup - copy a string and return a duplicate
 * @str: string to be copied
 * Return: duplicate otherwise NULL
 */
char *_strdup(char *str)
{
	char *n_str;

	if (str == NULL)
	{
		return (NULL);
	}

	n_str = (char *)malloc(strlen(str) + 1);

	if (n_str == NULL)
	{
		return (NULL);
	}

	strcpy(n_str, str);

	return (n_str);
}

/**
 * *_strcat - concatenate s trings
 * @dest: to be concatenated with src
 * @src: to transferred to dest
 * Return: dest at success
 */

char *_strcat(char *dest, char *src)
{
	int i = 0;
	int k;

	for (; dest[i] != '\0'; i++)
	{
		dest[i] = dest[i];
	}

	for (k = 0; src[k] != '\0'; k++)
	{
		dest[i + k] = src[k];
	}
	dest[i + k] = '\0';

	return (dest);
}
#include "shell.h"

/**
 * _strtok - tokenizes a string
 * @str: string to be tokenized
 * @delim: delimiter character
 *
 * Return: pointer to the next token
 */
char *_strtok(char *str, char *delim)
{
	static char *last = "";
	char *token, *ptr;

	if (str == NULL && last == NULL)
		return (NULL);

	if (str != NULL)
		ptr = str;
	else
		ptr = last;

	while (*ptr && _strchr(delim, *ptr))
		ptr++;
	if (*ptr == '\0')
		return (NULL);

	token = ptr;
	while (*ptr && _strchr(delim, *ptr))
		ptr++;
	if (*ptr == '\0')
		last = "";
	else
	{
		*ptr = '\0';
		last = ptr + 1;
	}
	return (token);
}

/**
 * _atoi - convert Ascii to Integer
 * @s: string to be converted into a number
 * Return: A conerted integer
 */

int _atoi(char *s)
{
	unsigned int res;
	int sign, i;

	sign = 1;
	res = 0;
	i = 0;

	while (s[i] != '\0')
	{
		if (s[i] == '-')
		{
			sign *= -1;
		}
		if (s[i] >= '0' && s[i] <= '9')
		{
			res = res * 10 + (s[i] - '0');
		}
		else if (res > 0)
		{
			break;
		}
		i++;
	}
	return (sign * res);
}

/**
 * _strncmp - compare 2 string upto n bytes
 * @s1: 1st str to compare
 * @s2: 2nd str to compare
 * @n: the maximum number of bytes
 *
 * Return: the diference between 2 string.
 * ------- if s1 - s2 > 0, then +ve int
 * ------- if s1 - s2 < 0, then -ve int
 * ------- if s1 = s2, then 0
 */
int _strncmp(const char *s1, const char *s2, size_t n)
{
	size_t i;

	for (i = 0; i < n && s1 && s2; i++)
	{
		if (s1[i] != s2[i])
			return (s1[i] - s2[i]);
	}
	if (i == n)
		return (0);

	return (s1[i] - s2[i]);
}
