#include "shell.h"

/**
 * add_lv_n - it adds the a variable node at linked list of variables
 * @head: is head node
 * @lvr: variable length
 * @v: value of that variable
 * @lvl: value length
 *
 * Return: the address of head node
 */

l_v *add_lv_n(l_v **head, int lvr, char *v, int lvl)
{
	l_v *tmp;
	l_v *new = malloc(sizeof(l_v));

	if (!new)
		return (NULL);

	new->var_len = lvr;
	new->var_val = v;
	new->val_len = lvl;
	new->next = NULL;

	if (!(*head))
		*head = new;
	else
	{
		tmp = *head;
		while (tmp->next)
			tmp = tmp->next;
		tmp->next = new;
	}

	return (*head);
}

/**
 * add_l_sep_n - adds a new node at thelist separators
 * @head: head the linked list
 * @s: separators
 * Return: a head a of new linked list
 */

l_sep *add_l_sep_n(l_sep **head, char s)
{
	l_sep *tmp;
	l_sep *new = malloc(sizeof(l_sep));

	if (!new)
		return (NULL);

	new->sep = s;
	new->next = NULL;

	if (*head == NULL)
		*head = new;

	else
	{
		tmp = *head;
		while (tmp->next)
			tmp = tmp->next;
		tmp->next = new;
	}

	return (*head);
}

/**
 * add_cmd_st_n - adds a new node at the command store linked list
 * @h: head of the linked list
 * @cmd: commnand to add
 * Return: the head of the linked list
 */

cmd_st *add_cmd_st_n(cmd_st **h, char *cmd)
{
	cmd_st *tmp, *new;

	new = malloc(sizeof(cmd_st));

	if (!new)
		return (NULL);
	new->c_line = cmd;
	new->next = NULL;

	if (*h == NULL)
		*h = new;
	else
	{
		tmp = *h;
		while (tmp->next)
			tmp = tmp->next;
		tmp->next = new;
	}
	return (*h);
}

/**
 * add_sep_cmd_n - adds separators and commandline in their respective list
 * @h_s: head of separators list
 * @h_c: head of commands
 * @str: input sting passed
 */

void add_sep_cmd_n(l_sep **h_s, cmd_st **h_c, char *str)
{
	int i;
	char *tok;
	for (i = 0; str[i]; i++)
	{
		if (str[i] == '|' || str[i] == '&')
		{
			add_l_sep_n(h_s, str[i]);
			i++;
		}
		else if (str[i] == ';')
		{
			add_l_sep_n(h_s, str[i]);
		}
	}

	for (tok = _strtok(str, ";|&"); tok != NULL; tok = _strtok(NULL, ";|&"))
	{
		add_cmd_st_n(h_c, ch_repl(tok, 1));
	}
}
#include "shell.h"

/**
 * check_exec - it checks weather it is executable
 * @data: shell data containin all data
 * Return: 0 if it is not execitable, positive int otherwise
 */

int check_exec(sh_dt *data)
{
	struct stat st;
	int i = 0;
	char *str = data->args[0];
	
	if (str == NULL)
		return (0);
	
	while (str[i] != '\0' && (str[i] != '.' || (str[i] == '.' && str[i + 1] != '/')))
	{
		if (str[i] == '/')
		{
			if (str[i + 1] != '.')
			{
				i++;
				break;
			}
			i++;
			break;
		}
		i++;
	}
	if (i == 0)
		return (0);

	if (stat(str + i, &st) == 0)
		return (i);

	PRINT_ERR(": Permission denied\n");
	return (-1);
}

/**
 * exec_cmd - it executes and run cmd lines
 * @data: shell containing data
 * Return: 1 on success
 */
int exec_cmd(sh_dt *data)
{
	pid_t pid, wpid;
	int state, run;
	(void) wpid;

	run = check_exec(data);
	if (run == -1)
		return (1);


	pid = fork();
	if (pid == 0)
		execve(data->args[0], data->args, data->env);
	else if (pid < 0)
	{
		perror("fork");
		exit(1);
	}
	else
	{
		do {
			wpid = waitpid(pid, &state, WUNTRACED);
		} while (!WIFEXITED(state) && !WIFSIGNALED(state));
	}

	data->status = state / 256;
	return (1);
}
#include "shell.h"

/*This file contains all memory managemens functions*/

/**
 * *_memset - fills first byte of memory area pointed to by s with const byte b
 * @s: final destination of the memory
 * @b: initial locationof the memory
 * @n: size of memory to be set
 * Return: s when success
 */

void *_memset(void *s, char b, size_t n)
{
	unsigned char *ptr = s;
	size_t i;

	for (i = 0; i < n; i++)
	{
		ptr[i] = (unsigned char)b;
	}
	return (ptr);
}


/**
 * *_memcpy - copy the data from src to dest,with size of n
 * @dest: final destination of data
 * @src: the source of data
 * @n: size of data to be copied
 * Return: always dest at success
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	for (; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

/**
 * *_realloc - reallocate the memory
 * @ptr: the ptr that is initially allocated
 * @new_size: size of new reallocated memory
 * @old_size: size of pre allocated memory
 * Return: new_ptr at success, ptr when both sizes are eqaul, otherwise NULL
 */

void *_realloc(void *ptr, unsigned int old_size, unsigned int new_size)
{
	void *new_ptr;

	if (new_size == 0)
	{
		free(ptr);
		return (NULL);
	}

	if (ptr == NULL)
	{
		new_ptr = malloc(new_size);
		return (new_ptr);
	}

	if (new_size == old_size)
	{
		return (ptr);
	}

	new_ptr = malloc(new_size);

	if (new_ptr != NULL)
	{
		_memcpy(new_ptr, ptr, old_size < new_size ? old_size : new_size);
		free(ptr);
	}
	return (new_ptr);


}

/**
 * free_d - frees all the data in the struct
 * @data: struct contains the data
 * Return: 0 at sucess
 */

int free_d(sh_dt *data)
{
	int i = 0;

	for (; data->env[i]; i++)
	{
		free(data->env[i]);
	}
	free(data->env);
	free(data->pid);

	return (0);
}

/**
 * free_lv - frees linked list of variables
 * @head: head node;
 */

void free_lv(l_v **head)
{
	l_v *tmp;
	l_v *current;

	if (!head)
	{
		current = *head;
		while ((tmp = current))
		{
			current = current->next;
			free(tmp);
		}
		*head = NULL;
	}
}
#include "shell.h"

/**
 * free_l_sep - free list of sep linked list
 * @h: head of linked list
 */

void free_l_sep(l_sep **h)
{
	l_sep *c = *h, *tmp;

	while (c)
	{
		tmp = c;
		c = c->next;
		free(tmp);
	}

	*h = NULL;
}

/**
 * free_cmd_st - free linked list of command store
 * @h: head of linked list
 */
void free_cmd_st(cmd_st **h)
{
	cmd_st *c = *h, *tmp;

	while (c)
	{
		tmp = c;
		c = c->next;
		free(tmp);
	}

	*h = NULL;
}

/**
 * *_dp_realloc - reallocate the memory in a double pointer
 * @ptr: the ptr that is initially allocated
 * @old_size: size of pre-allocated memory
 * @new_size: size of new reallocated memory
 * Return: new_ptr at success, ptr when both sizes are equal, otherwise NULL
 */
void *_dp_realloc(void *ptr, unsigned int old_size, unsigned int new_size)
{
	void *new_ptr;

	if (new_size == 0)
	{
		free(ptr);
		return (NULL);
	}

	if (ptr == NULL)
	{
		new_ptr = malloc(new_size);
		return (new_ptr);
	}

	if (new_size == old_size)
	{
		return (ptr);
	}

	if (new_size > old_size)
	{
		void **double_ptr = (void **)ptr;
		*double_ptr = realloc(*double_ptr, new_size);
		new_ptr = *double_ptr;
	}
	else
	{
		new_ptr = malloc(new_size);
		if (new_ptr != NULL)
		{
			_memcpy(new_ptr, ptr, old_size < new_size ? old_size : new_size);
			free(ptr);
		}
	}

	return (new_ptr);
}
